`include "pu.vh"
module imem(
	input [`PCS:0] pc,
	output logic [`CMDS:0] o);
	always_comb
		case(pc)
		// synopsys full_case parallel_case
		6'h00: o = 16'b000_0_00_00_0_000_00_00; // NOP
		6'h01: o = 16'b010_0_00_00_1010_1001; // LIL r0, r0, 8'b10101001
		6'h02: o = 16'b010_1_00_00_0000_0100; // LIH r0, r0, 8'b00000100
		6'h03: o = 16'b010_0_01_01_0101_0110; // LIL r1, r1, 8'b01010110
		6'h04: o = 16'b010_1_01_01_0000_0100; // LIH r1, r1, 8'b00000100
		6'h05: o = 16'b000_0_10_00_0000_0101; // ADD r2 := r0, r1
		6'h06: o = 16'b010_0_11_11_0000_0001; // LIL r3, r3, 8'b00000001
		6'h07: o = 16'b010_1_11_11_0000_0000; // LIH r3, r3, 8'b00000000
		6'h08: o = 16'b101_0_00_11_0000_0001; // SM [r3 + 00000001]=r0
		6'h09: o = 16'b010_0_11_11_0000_0000; // LIL r3, r3, 8'b00000000
		6'h0a: o = 16'b010_1_11_11_0000_0000; // LIH r3, r3, 8'b00000000
		6'h0b: o = 16'b100_0_01_11_0000_0010; // LM r1=[r3 + 00000010]
		6'h0c: o = 16'b000_0_00_00_0000_0001; // HALT
		default: o = 16'b0_0_00_000_00_00;
		endcase
endmodule

/*
F E D C B A 9 8 7 6 5 4 3 2 1 0
0 0 0 0 * * * * * * * * * 0 * 0 ; NOP
0 0 0 0 * * * * * * * * * 0 * 1 ; HALT
0 0 0 0 rw> a-> * op -> * 1 b-> ; CAL rw=ra,rb
0 0 0 1 rw> a-> * op -> * 1 b-> ; LM rw=[ra op rb]
0 0 1 o rw> a-> im------------> ; CAL rw=rb,im
0 1 0 0 rw> b-> im------------> ; LIL rw=rb,im
0 1 0 1 rw> b-> im------------> ; LIH rw=ra,im
1 0 0 o rw> a-> im------------> ; LM rw=[ra o im] o=0:ADD/1:SUB
1 0 1 o a-> a-> im------------> ; SM [ra o im]=rb
*/

