/* Generated by Yosys 0.9 (git sha1 1979e0b1, i686-w64-mingw32.static-g++ 5.5.0 -Os) */

(* src = "alu.v:1" *)
module alu(a, b, op, result);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  wire _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  wire _245_;
  wire _246_;
  wire _247_;
  wire _248_;
  wire _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  (* src = "alu.v:2" *)
  input [15:0] a;
  (* src = "alu.v:2" *)
  input [15:0] b;
  (* src = "alu.v:3" *)
  input [2:0] op;
  (* src = "alu.v:4" *)
  output [15:0] result;
  assign _211_ = a[0] ^ b[0];
  assign _212_ = ~op[2];
  assign _213_ = ~(op[1] & op[0]);
  assign _214_ = ~(_213_ | _212_);
  assign _215_ = ~(_213_ | op[2]);
  assign _216_ = ~(_215_ | _214_);
  assign _217_ = op[0] | ~(op[1]);
  assign _218_ = _217_ | ~(_212_);
  assign _219_ = op[1] | ~(op[0]);
  assign _220_ = _219_ | ~(_212_);
  assign _221_ = ~(_220_ & _218_);
  assign _222_ = _221_ | ~(_216_);
  assign _223_ = a[0] | b[0];
  assign _224_ = ~((_215_ & _223_) | (_214_ & b[0]));
  assign _225_ = ~(a[0] & b[0]);
  assign _226_ = ~(_225_ & _223_);
  assign _227_ = ~((_225_ | _218_) & (_220_ | _226_));
  assign _228_ = _227_ | ~(_224_);
  assign result[0] = _222_ ? _228_ : _211_;
  assign _229_ = ~(a[1] ^ b[1]);
  assign _230_ = _229_ ^ _225_;
  assign _231_ = a[1] | b[1];
  assign _232_ = ~((_215_ & _231_) | (_214_ & b[1]));
  assign _233_ = ~(a[1] & b[1]);
  assign _234_ = a[1] ^ b[1];
  assign _235_ = b[0] & ~(a[0]);
  assign _236_ = ~(_235_ ^ _234_);
  assign _237_ = ~((_233_ | _218_) & (_220_ | _236_));
  assign _238_ = _237_ | ~(_232_);
  assign result[1] = _222_ ? _238_ : _230_;
  assign _239_ = a[2] ^ b[2];
  assign _240_ = ~((_229_ | _225_) & _233_);
  assign _241_ = _240_ ^ _239_;
  assign _242_ = a[2] | b[2];
  assign _243_ = ~((_215_ & _242_) | (_214_ & b[2]));
  assign _244_ = ~(a[2] & b[2]);
  assign _245_ = ~_239_;
  assign _246_ = b[1] | ~(a[1]);
  assign _247_ = ~((_235_ | _234_) & _246_);
  assign _248_ = ~(_247_ ^ _245_);
  assign _249_ = ~((_244_ | _218_) & (_220_ | _248_));
  assign _250_ = _249_ | ~(_243_);
  assign result[2] = _222_ ? _250_ : _241_;
  assign _251_ = ~(a[3] ^ b[3]);
  assign _252_ = ~_244_;
  assign _253_ = ~((_240_ & _239_) | _252_);
  assign _254_ = _253_ ^ _251_;
  assign _000_ = a[3] | b[3];
  assign _001_ = ~((_215_ & _000_) | (_214_ & b[3]));
  assign _002_ = ~(a[3] & b[3]);
  assign _003_ = a[3] ^ b[3];
  assign _004_ = b[2] | ~(a[2]);
  assign _005_ = ~_004_;
  assign _006_ = ~((_247_ & _245_) | _005_);
  assign _007_ = ~(_006_ ^ _003_);
  assign _008_ = ~((_002_ | _218_) & (_220_ | _007_));
  assign _009_ = _008_ | ~(_001_);
  assign result[3] = _222_ ? _009_ : _254_;
  assign _010_ = a[4] ^ b[4];
  assign _011_ = ~((_251_ | _244_) & _002_);
  assign _012_ = _251_ | ~(_239_);
  assign _013_ = _240_ & ~(_012_);
  assign _014_ = ~(_013_ | _011_);
  assign _015_ = ~(_014_ ^ _010_);
  assign _016_ = a[4] | b[4];
  assign _017_ = ~((_215_ & _016_) | (_214_ & b[4]));
  assign _018_ = a[4] & b[4];
  assign _019_ = ~_018_;
  assign _020_ = b[3] | ~(a[3]);
  assign _021_ = ~((_003_ | _004_) & _020_);
  assign _022_ = ~(_003_ | _239_);
  assign _023_ = ~((_022_ & _247_) | _021_);
  assign _024_ = ~(_023_ ^ _010_);
  assign _025_ = ~((_019_ | _218_) & (_220_ | _024_));
  assign _026_ = _025_ | ~(_017_);
  assign result[4] = _222_ ? _026_ : _015_;
  assign _027_ = a[5] ^ b[5];
  assign _028_ = _010_ & ~(_014_);
  assign _029_ = ~(_028_ | _018_);
  assign _030_ = ~(_029_ ^ _027_);
  assign _031_ = a[5] | b[5];
  assign _032_ = ~((_215_ & _031_) | (_214_ & b[5]));
  assign _033_ = a[5] & b[5];
  assign _034_ = ~_033_;
  assign _035_ = b[4] | ~(a[4]);
  assign _036_ = ~((_023_ | _010_) & _035_);
  assign _037_ = _036_ ^ _027_;
  assign _038_ = ~((_034_ | _218_) & (_220_ | _037_));
  assign _039_ = _038_ | ~(_032_);
  assign result[5] = _222_ ? _039_ : _030_;
  assign _040_ = a[6] ^ b[6];
  assign _041_ = ~((_027_ & _018_) | _033_);
  assign _042_ = ~(_027_ & _010_);
  assign _043_ = ~((_042_ | _014_) & _041_);
  assign _044_ = _043_ ^ _040_;
  assign _045_ = a[6] | b[6];
  assign _046_ = ~((_215_ & _045_) | (_214_ & b[6]));
  assign _047_ = a[6] & b[6];
  assign _048_ = ~_047_;
  assign _049_ = ~(a[6] ^ b[6]);
  assign _050_ = b[5] | ~(a[5]);
  assign _051_ = ~((_027_ | _035_) & _050_);
  assign _052_ = ~_051_;
  assign _053_ = ~(_027_ | _010_);
  assign _054_ = ~_053_;
  assign _055_ = ~((_054_ | _023_) & _052_);
  assign _056_ = ~(_055_ ^ _049_);
  assign _057_ = ~((_048_ | _218_) & (_220_ | _056_));
  assign _058_ = _057_ | ~(_046_);
  assign result[6] = _222_ ? _058_ : _044_;
  assign _059_ = ~(a[7] ^ b[7]);
  assign _060_ = ~((_043_ & _040_) | _047_);
  assign _061_ = _060_ ^ _059_;
  assign _062_ = a[7] | b[7];
  assign _063_ = ~((_215_ & _062_) | (_214_ & b[7]));
  assign _064_ = ~(a[7] & b[7]);
  assign _065_ = a[7] ^ b[7];
  assign _066_ = b[6] | ~(a[6]);
  assign _067_ = ~_066_;
  assign _068_ = ~((_055_ & _049_) | _067_);
  assign _069_ = ~(_068_ ^ _065_);
  assign _070_ = ~((_064_ | _218_) & (_220_ | _069_));
  assign _071_ = _070_ | ~(_063_);
  assign result[7] = _222_ ? _071_ : _061_;
  assign _072_ = a[8] ^ b[8];
  assign _073_ = ~((_059_ | _048_) & _064_);
  assign _074_ = _059_ | ~(_040_);
  assign _075_ = ~(_074_ | _041_);
  assign _076_ = _075_ | _073_;
  assign _077_ = _074_ | _042_;
  assign _078_ = ~(_077_ | _014_);
  assign _079_ = ~(_078_ | _076_);
  assign _080_ = ~(_079_ ^ _072_);
  assign _081_ = a[8] | b[8];
  assign _082_ = ~((_215_ & _081_) | (_214_ & b[8]));
  assign _083_ = a[8] & b[8];
  assign _084_ = ~_083_;
  assign _085_ = _083_ | ~(_081_);
  assign _086_ = b[7] | ~(a[7]);
  assign _087_ = ~((_065_ | _066_) & _086_);
  assign _088_ = _049_ & ~(_065_);
  assign _089_ = ~((_088_ & _051_) | _087_);
  assign _090_ = ~(_088_ & _053_);
  assign _091_ = ~((_090_ | _023_) & _089_);
  assign _092_ = ~(_091_ ^ _085_);
  assign _093_ = ~((_084_ | _218_) & (_220_ | _092_));
  assign _094_ = _093_ | ~(_082_);
  assign result[8] = _222_ ? _094_ : _080_;
  assign _095_ = ~(a[9] ^ b[9]);
  assign _096_ = ~_095_;
  assign _097_ = _078_ | _076_;
  assign _098_ = ~((_097_ & _072_) | _083_);
  assign _099_ = ~(_098_ ^ _096_);
  assign _100_ = a[9] | b[9];
  assign _101_ = ~((_215_ & _100_) | (_214_ & b[9]));
  assign _102_ = a[9] & b[9];
  assign _103_ = ~_102_;
  assign _104_ = _100_ & ~(_102_);
  assign _105_ = a[8] & ~(b[8]);
  assign _106_ = ~((_091_ & _085_) | _105_);
  assign _107_ = ~(_106_ ^ _104_);
  assign _108_ = ~((_103_ | _218_) & (_220_ | _107_));
  assign _109_ = _108_ | ~(_101_);
  assign result[9] = _222_ ? _109_ : _099_;
  assign _110_ = ~(a[10] ^ b[10]);
  assign _111_ = ~((_096_ & _083_) | _102_);
  assign _112_ = _095_ | ~(_072_);
  assign _113_ = ~((_112_ | _079_) & _111_);
  assign _114_ = ~(_113_ ^ _110_);
  assign _115_ = a[10] | b[10];
  assign _116_ = ~((_215_ & _115_) | (_214_ & b[10]));
  assign _117_ = a[10] & b[10];
  assign _118_ = ~_117_;
  assign _119_ = _117_ | ~(_115_);
  assign _120_ = a[9] & ~(b[9]);
  assign _121_ = _102_ | ~(_100_);
  assign _122_ = ~((_121_ & _105_) | _120_);
  assign _123_ = _104_ | ~(_085_);
  assign _124_ = _091_ & ~(_123_);
  assign _125_ = _124_ | ~(_122_);
  assign _126_ = ~(_125_ ^ _119_);
  assign _127_ = ~((_118_ | _218_) & (_220_ | _126_));
  assign _128_ = _127_ | ~(_116_);
  assign result[10] = _222_ ? _128_ : _114_;
  assign _129_ = ~(a[11] ^ b[11]);
  assign _130_ = ~_110_;
  assign _131_ = ~((_113_ & _130_) | _117_);
  assign _132_ = _131_ ^ _129_;
  assign _133_ = a[11] | b[11];
  assign _134_ = ~((_215_ & _133_) | (_214_ & b[11]));
  assign _135_ = a[11] & b[11];
  assign _136_ = ~_135_;
  assign _137_ = _133_ & ~(_135_);
  assign _138_ = a[10] & ~(b[10]);
  assign _139_ = ~((_125_ & _119_) | _138_);
  assign _140_ = ~(_139_ ^ _137_);
  assign _141_ = ~((_136_ | _218_) & (_220_ | _140_));
  assign _142_ = _141_ | ~(_134_);
  assign result[11] = _222_ ? _142_ : _132_;
  assign _143_ = ~(a[12] ^ b[12]);
  assign _144_ = _117_ & ~(_129_);
  assign _145_ = ~(_144_ | _135_);
  assign _146_ = _129_ | _110_;
  assign _147_ = ~((_146_ | _111_) & _145_);
  assign _148_ = ~(_146_ | _112_);
  assign _149_ = ~((_148_ & _097_) | _147_);
  assign _150_ = _149_ ^ _143_;
  assign _151_ = a[12] | b[12];
  assign _152_ = ~((_215_ & _151_) | (_214_ & b[12]));
  assign _153_ = a[12] & b[12];
  assign _154_ = ~_153_;
  assign _155_ = _151_ & ~(_153_);
  assign _156_ = a[11] & ~(b[11]);
  assign _157_ = _135_ | ~(_133_);
  assign _158_ = ~((_157_ & _138_) | _156_);
  assign _159_ = _137_ | ~(_119_);
  assign _160_ = ~((_159_ | _122_) & _158_);
  assign _161_ = ~(_159_ | _123_);
  assign _162_ = ~((_161_ & _091_) | _160_);
  assign _163_ = ~(_162_ ^ _155_);
  assign _164_ = ~((_154_ | _218_) & (_220_ | _163_));
  assign _165_ = _164_ | ~(_152_);
  assign result[12] = _222_ ? _165_ : _150_;
  assign _166_ = ~(a[13] ^ b[13]);
  assign _167_ = ~((_149_ | _143_) & _154_);
  assign _168_ = ~(_167_ ^ _166_);
  assign _169_ = a[13] | b[13];
  assign _170_ = ~((_215_ & _169_) | (_214_ & b[13]));
  assign _171_ = a[13] & b[13];
  assign _172_ = ~_171_;
  assign _173_ = _169_ & ~(_171_);
  assign _174_ = b[12] | ~(a[12]);
  assign _175_ = ~((_162_ | _155_) & _174_);
  assign _176_ = _175_ ^ _173_;
  assign _177_ = ~((_172_ | _218_) & (_220_ | _176_));
  assign _178_ = _177_ | ~(_170_);
  assign result[13] = _222_ ? _178_ : _168_;
  assign _179_ = a[14] ^ b[14];
  assign _180_ = _153_ & ~(_166_);
  assign _181_ = ~(_180_ | _171_);
  assign _182_ = ~(_166_ | _143_);
  assign _183_ = ~_182_;
  assign _184_ = ~((_183_ | _149_) & _181_);
  assign _185_ = _184_ ^ _179_;
  assign _186_ = a[14] | b[14];
  assign _187_ = ~((_215_ & _186_) | (_214_ & b[14]));
  assign _188_ = a[14] & b[14];
  assign _189_ = ~_188_;
  assign _190_ = _188_ | ~(_186_);
  assign _191_ = a[13] & ~(b[13]);
  assign _192_ = ~(_173_ | _174_);
  assign _193_ = ~(_192_ | _191_);
  assign _194_ = _173_ | _155_;
  assign _195_ = ~((_194_ | _162_) & _193_);
  assign _196_ = ~(_195_ ^ _190_);
  assign _197_ = ~((_189_ | _218_) & (_220_ | _196_));
  assign _198_ = _197_ | ~(_187_);
  assign result[14] = _222_ ? _198_ : _185_;
  assign _199_ = a[15] ^ b[15];
  assign _200_ = ~((_184_ & _179_) | _188_);
  assign _201_ = ~(_200_ ^ _199_);
  assign _202_ = a[15] | b[15];
  assign _203_ = ~((_215_ & _202_) | (_214_ & b[15]));
  assign _204_ = ~(a[15] & b[15]);
  assign _205_ = _204_ & _202_;
  assign _206_ = a[14] & ~(b[14]);
  assign _207_ = ~((_195_ & _190_) | _206_);
  assign _208_ = ~(_207_ ^ _205_);
  assign _209_ = ~((_204_ | _218_) & (_220_ | _208_));
  assign _210_ = _209_ | ~(_203_);
  assign result[15] = _222_ ? _210_ : _201_;
endmodule

(* src = "dec.v:1" *)
module dec(o, aradr, bradr, op, wadr, we, halt, ll, lh, ib);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  (* src = "dec.v:3" *)
  output [1:0] aradr;
  (* src = "dec.v:3" *)
  output [1:0] bradr;
  (* src = "dec.v:6" *)
  output halt;
  (* src = "dec.v:7" *)
  output [7:0] ib;
  (* src = "dec.v:6" *)
  output lh;
  (* src = "dec.v:6" *)
  output ll;
  (* src = "dec.v:2" *)
  input [15:0] o;
  (* src = "dec.v:4" *)
  output [2:0] op;
  (* src = "dec.v:5" *)
  output [1:0] wadr;
  (* src = "dec.v:6" *)
  output we;
  assign _00_ = ~o[0];
  assign _01_ = ~o[15];
  assign _02_ = o[13] | ~(o[14]);
  assign _03_ = _02_ | ~(_01_);
  assign ib[0] = ~(_03_ | _00_);
  assign _04_ = ~o[1];
  assign ib[1] = ~(_03_ | _04_);
  assign _05_ = ~o[2];
  assign ib[2] = ~(_03_ | _05_);
  assign ib[3] = o[3] & ~(_03_);
  assign ib[4] = o[4] & ~(_03_);
  assign ib[5] = o[5] & ~(_03_);
  assign ib[6] = o[6] & ~(_03_);
  assign ib[7] = o[7] & ~(_03_);
  assign _06_ = ~(_02_ | o[15]);
  assign _07_ = o[14] | ~(o[13]);
  assign _08_ = ~(_07_ | o[15]);
  assign _09_ = ~(_08_ | _06_);
  assign _10_ = o[14] | o[13];
  assign _11_ = _10_ | ~(_01_);
  assign we = ~((_11_ | _05_) & _09_);
  assign _12_ = ~o[10];
  assign _13_ = ~(o[2] & o[10]);
  assign wadr[0] = ~((_11_ | _13_) & (_09_ | _12_));
  assign _14_ = ~o[11];
  assign _15_ = ~(o[11] & o[2]);
  assign wadr[1] = ~((_11_ | _15_) & (_09_ | _14_));
  assign _16_ = ~o[8];
  assign _17_ = ~(o[8] & o[2]);
  assign bradr[0] = ~((_11_ | _17_) & (_03_ | _16_));
  assign _18_ = ~o[9];
  assign _19_ = ~(o[9] & o[2]);
  assign bradr[1] = ~((_11_ | _19_) & (_03_ | _18_));
  assign _20_ = _07_ | ~(_01_);
  assign _21_ = ~(o[0] & o[2]);
  assign aradr[0] = ~((_11_ | _21_) & (_20_ | _00_));
  assign _22_ = ~(o[1] & o[2]);
  assign aradr[1] = ~((_11_ | _22_) & (_20_ | _04_));
  assign _23_ = ~o[13];
  assign _24_ = ~o[14];
  assign _25_ = ~((_24_ | _23_) & _01_);
  assign _26_ = ~((_08_ & o[12]) | _06_);
  assign _27_ = ~(_10_ | o[15]);
  assign _28_ = ~(o[4] & o[2]);
  assign _29_ = _28_ | ~(_27_);
  assign op[0] = ~((_29_ & _26_) | _25_);
  assign _30_ = o[5] & o[2];
  assign _31_ = ~((_30_ & _27_) | _06_);
  assign op[1] = ~(_31_ | _25_);
  assign _32_ = o[6] & o[2];
  assign _33_ = ~((_32_ & _27_) | _06_);
  assign op[2] = ~(_33_ | _25_);
  assign _34_ = ~o[12];
  assign ll = ~((_03_ | _34_) & _20_);
  assign _35_ = o[2] | ~(o[0]);
  assign halt = ~(_35_ | _11_);
  assign lh = ~(_03_ | o[12]);
endmodule

(* src = "imem.v:1" *)
module imem(pc, o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  (* src = "imem.v:1" *)
  output [15:0] o;
  (* src = "imem.v:1" *)
  input [5:0] pc;
  assign _000_ = pc[1] & pc[0];
  assign _001_ = pc[3] | pc[2];
  assign _002_ = _000_ & ~(_001_);
  assign _003_ = pc[4] | ~(pc[5]);
  assign _004_ = _003_ | ~(_002_);
  assign _005_ = pc[1] | pc[0];
  assign _006_ = pc[3] | ~(pc[2]);
  assign _007_ = ~(_006_ | _005_);
  assign _008_ = pc[5] | pc[4];
  assign _009_ = _008_ | ~(_007_);
  assign _010_ = _006_ | ~(_000_);
  assign _011_ = pc[0] | ~(pc[1]);
  assign _012_ = pc[2] | ~(pc[3]);
  assign _013_ = _012_ | _011_;
  assign _014_ = ~((_013_ & _010_) | _008_);
  assign _015_ = pc[1] | ~(pc[0]);
  assign _016_ = ~(pc[3] & pc[2]);
  assign _017_ = _016_ | _015_;
  assign _018_ = _005_ | _001_;
  assign _019_ = pc[5] | ~(pc[4]);
  assign _020_ = ~((_018_ | _019_) & (_017_ | _008_));
  assign _021_ = ~(_020_ | _014_);
  assign _022_ = pc[4] & ~(pc[5]);
  assign _023_ = ~(_011_ | _006_);
  assign _024_ = ~((_023_ | _002_) & _022_);
  assign _025_ = _015_ | _012_;
  assign _026_ = ~(pc[1] | pc[0]);
  assign _027_ = _016_ | ~(_026_);
  assign _028_ = ~((_027_ & _025_) | _019_);
  assign _029_ = _028_ | ~(_024_);
  assign _030_ = _029_ | ~(_021_);
  assign _031_ = _016_ | ~(_000_);
  assign _032_ = ~(_011_ | _001_);
  assign _033_ = ~_032_;
  assign _034_ = ~((_031_ | _019_) & (_003_ | _033_));
  assign _035_ = ~(_034_ | _030_);
  assign _036_ = ~(_035_ & _004_);
  assign _037_ = _011_ | _006_;
  assign _038_ = ~((_025_ & _037_) | _008_);
  assign _039_ = ~((_031_ & _027_) | _008_);
  assign _040_ = ~(_039_ | _038_);
  assign _041_ = ~(_015_ | _006_);
  assign _042_ = ~((_041_ | _032_) & _022_);
  assign _043_ = _012_ | ~(_026_);
  assign _044_ = _012_ | ~(_000_);
  assign _045_ = ~((_044_ & _043_) | _019_);
  assign _046_ = _045_ | ~(_042_);
  assign _047_ = _046_ | ~(_040_);
  assign _048_ = _016_ | _011_;
  assign _049_ = ~(_015_ | _001_);
  assign _050_ = ~_049_;
  assign _051_ = ~((_048_ | _019_) & (_003_ | _050_));
  assign _052_ = ~(_051_ | _047_);
  assign _053_ = ~(pc[5] | pc[4]);
  assign _054_ = ~(_012_ | _005_);
  assign _055_ = ~((_054_ | _041_) & _053_);
  assign _056_ = ~((_048_ & _044_) | _008_);
  assign _057_ = _056_ | ~(_055_);
  assign _058_ = ~((_049_ | _007_) & _022_);
  assign _059_ = ~((_013_ & _010_) | _019_);
  assign _060_ = _059_ | ~(_058_);
  assign _061_ = ~(_060_ | _057_);
  assign _062_ = ~((_018_ | _003_) & (_017_ | _019_));
  assign _063_ = _062_ | ~(_061_);
  assign _064_ = _052_ & ~(_063_);
  assign _065_ = _064_ & ~(_036_);
  assign _066_ = ~((_007_ | _002_) & _053_);
  assign _067_ = ~((_049_ | _032_) & _053_);
  assign _068_ = _067_ & _066_;
  assign _069_ = _068_ & _065_;
  assign o[0] = ~((_009_ & _004_) | _069_);
  assign o[2] = ~((_064_ & _035_) | _069_);
  assign o[6] = ~((_052_ & _035_) | _069_);
  assign o[8] = ~(_069_ | _064_);
  assign o[9] = ~(_069_ | _035_);
  assign o[10] = ~((_066_ & _035_) | _069_);
  assign o[11] = _063_ & ~(_069_);
  assign _070_ = ~(_032_ & _053_);
  assign o[12] = ~((_070_ & _009_) | _069_);
  assign o[14] = ~(_069_ | _068_);
  assign { o[15], o[13], o[7], o[5:3], o[1] } = { 3'h0, o[6], o[6], 2'h0 };
endmodule

(* src = "lidx.v:1" *)
module lidx(b, lb, lh, ll, ib);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  (* src = "lidx.v:2" *)
  input [15:0] b;
  (* src = "lidx.v:5" *)
  input [7:0] ib;
  (* src = "lidx.v:3" *)
  output [15:0] lb;
  (* src = "lidx.v:4" *)
  input lh;
  (* src = "lidx.v:4" *)
  input ll;
  assign _001_ = lh | ~(ll);
  assign _002_ = ll | ~(lh);
  assign _003_ = ~(_002_ & _001_);
  assign _004_ = ~b[0];
  assign _005_ = ~ib[0];
  assign _006_ = ~((_001_ | _005_) & (_004_ | _002_));
  assign lb[0] = _003_ ? _006_ : b[0];
  assign _007_ = ~b[1];
  assign _008_ = ~ib[1];
  assign _009_ = ~((_001_ | _008_) & (_007_ | _002_));
  assign lb[1] = _003_ ? _009_ : b[1];
  assign _010_ = ~b[2];
  assign _011_ = ~ib[2];
  assign _012_ = ~((_001_ | _011_) & (_010_ | _002_));
  assign lb[2] = _003_ ? _012_ : b[2];
  assign _013_ = ~b[3];
  assign _014_ = ~ib[3];
  assign _015_ = ~((_001_ | _014_) & (_013_ | _002_));
  assign lb[3] = _003_ ? _015_ : b[3];
  assign _016_ = ~b[4];
  assign _017_ = ~ib[4];
  assign _018_ = ~((_001_ | _017_) & (_016_ | _002_));
  assign lb[4] = _003_ ? _018_ : b[4];
  assign _019_ = ~b[5];
  assign _020_ = ~ib[5];
  assign _021_ = ~((_001_ | _020_) & (_019_ | _002_));
  assign lb[5] = _003_ ? _021_ : b[5];
  assign _022_ = ~b[6];
  assign _023_ = ~ib[6];
  assign _024_ = ~((_001_ | _023_) & (_022_ | _002_));
  assign lb[6] = _003_ ? _024_ : b[6];
  assign _025_ = ~b[7];
  assign _026_ = ~ib[7];
  assign _027_ = ~((_001_ | _026_) & (_025_ | _002_));
  assign lb[7] = _003_ ? _027_ : b[7];
  assign _028_ = ~b[8];
  assign _029_ = ~((_001_ | _028_) & (_005_ | _002_));
  assign lb[8] = _003_ ? _029_ : b[8];
  assign _030_ = ~b[9];
  assign _031_ = ~((_001_ | _030_) & (_008_ | _002_));
  assign lb[9] = _003_ ? _031_ : b[9];
  assign _032_ = ~b[10];
  assign _033_ = ~((_001_ | _032_) & (_011_ | _002_));
  assign lb[10] = _003_ ? _033_ : b[10];
  assign _034_ = ~b[11];
  assign _035_ = ~((_001_ | _034_) & (_014_ | _002_));
  assign lb[11] = _003_ ? _035_ : b[11];
  assign _036_ = ~b[12];
  assign _037_ = ~((_001_ | _036_) & (_017_ | _002_));
  assign lb[12] = _003_ ? _037_ : b[12];
  assign _038_ = ~b[13];
  assign _039_ = ~((_001_ | _038_) & (_020_ | _002_));
  assign lb[13] = _003_ ? _039_ : b[13];
  assign _040_ = ~b[14];
  assign _041_ = ~((_001_ | _040_) & (_023_ | _002_));
  assign lb[14] = _003_ ? _041_ : b[14];
  assign _042_ = ~b[15];
  assign _000_ = ~((_001_ | _042_) & (_026_ | _002_));
  assign lb[15] = _003_ ? _000_ : b[15];
endmodule

(* src = "pc.v:1" *)
module pc(halt, pc, clk, rst);
  (* src = "pc.v:5" *)
  wire [5:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "pc.v:4" *)
  input clk;
  (* src = "pc.v:2" *)
  input halt;
  (* src = "pc.v:3" *)
  output [5:0] pc;
  reg [5:0] pc;
  (* src = "pc.v:4" *)
  input rst;
  assign _00_[0] = ~(halt ^ pc[0]);
  assign _01_ = pc[1] ^ pc[0];
  assign _00_[1] = halt ? pc[1] : _01_;
  assign _02_ = ~(pc[1] & pc[0]);
  assign _03_ = ~(_02_ ^ pc[2]);
  assign _00_[2] = halt ? pc[2] : _03_;
  assign _04_ = _02_ | ~(pc[2]);
  assign _05_ = ~(_04_ ^ pc[3]);
  assign _00_[3] = halt ? pc[3] : _05_;
  assign _06_ = ~(pc[3] & pc[2]);
  assign _07_ = _06_ | _02_;
  assign _08_ = ~(_07_ ^ pc[4]);
  assign _00_[4] = halt ? pc[4] : _08_;
  assign _09_ = _07_ | ~(pc[4]);
  assign _10_ = ~(_09_ ^ pc[5]);
  assign _00_[5] = halt ? pc[5] : _10_;
  (* src = "pc.v:5" *)
  always @(posedge clk or posedge rst)
    if (rst)
      pc[0] <= 0;
    else
      pc[0] <= _00_[0];
  (* src = "pc.v:5" *)
  always @(posedge clk or posedge rst)
    if (rst)
      pc[1] <= 0;
    else
      pc[1] <= _00_[1];
  (* src = "pc.v:5" *)
  always @(posedge clk or posedge rst)
    if (rst)
      pc[2] <= 0;
    else
      pc[2] <= _00_[2];
  (* src = "pc.v:5" *)
  always @(posedge clk or posedge rst)
    if (rst)
      pc[3] <= 0;
    else
      pc[3] <= _00_[3];
  (* src = "pc.v:5" *)
  always @(posedge clk or posedge rst)
    if (rst)
      pc[4] <= 0;
    else
      pc[4] <= _00_[4];
  (* src = "pc.v:5" *)
  always @(posedge clk or posedge rst)
    if (rst)
      pc[5] <= 0;
    else
      pc[5] <= _00_[5];
endmodule

(* src = "rega.v:1" *)
module rega(arad, brad, outa, outb, en, wad, in, clk, rst);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  (* src = "rega.v:2" *)
  input [1:0] arad;
  (* src = "rega.v:2" *)
  input [1:0] brad;
  (* src = "rega.v:7" *)
  input clk;
  (* src = "rega.v:4" *)
  input en;
  (* src = "rega.v:6" *)
  input [15:0] in;
  (* src = "rega.v:3" *)
  output [15:0] outa;
  (* src = "rega.v:3" *)
  output [15:0] outb;
  reg [15:0] \regar[0] ;
  reg [15:0] \regar[1] ;
  reg [15:0] \regar[2] ;
  reg [15:0] \regar[3] ;
  (* src = "rega.v:7" *)
  input rst;
  (* src = "rega.v:5" *)
  input [1:0] wad;
  assign _064_ = ~en;
  assign _065_ = ~(wad[0] & wad[1]);
  assign _066_ = ~(_065_ | _064_);
  assign _048_ = _066_ ? in[0] : \regar[3] [0];
  assign _055_ = _066_ ? in[1] : \regar[3] [1];
  assign _056_ = _066_ ? in[2] : \regar[3] [2];
  assign _057_ = _066_ ? in[3] : \regar[3] [3];
  assign _058_ = _066_ ? in[4] : \regar[3] [4];
  assign _059_ = _066_ ? in[5] : \regar[3] [5];
  assign _060_ = _066_ ? in[6] : \regar[3] [6];
  assign _061_ = _066_ ? in[7] : \regar[3] [7];
  assign _062_ = _066_ ? in[8] : \regar[3] [8];
  assign _063_ = _066_ ? in[9] : \regar[3] [9];
  assign _049_ = _066_ ? in[10] : \regar[3] [10];
  assign _050_ = _066_ ? in[11] : \regar[3] [11];
  assign _051_ = _066_ ? in[12] : \regar[3] [12];
  assign _052_ = _066_ ? in[13] : \regar[3] [13];
  assign _053_ = _066_ ? in[14] : \regar[3] [14];
  assign _054_ = _066_ ? in[15] : \regar[3] [15];
  assign _067_ = wad[0] | wad[1];
  assign _068_ = ~(_067_ | _064_);
  assign _000_ = _068_ ? in[0] : \regar[0] [0];
  assign _007_ = _068_ ? in[1] : \regar[0] [1];
  assign _008_ = _068_ ? in[2] : \regar[0] [2];
  assign _009_ = _068_ ? in[3] : \regar[0] [3];
  assign _010_ = _068_ ? in[4] : \regar[0] [4];
  assign _011_ = _068_ ? in[5] : \regar[0] [5];
  assign _012_ = _068_ ? in[6] : \regar[0] [6];
  assign _013_ = _068_ ? in[7] : \regar[0] [7];
  assign _014_ = _068_ ? in[8] : \regar[0] [8];
  assign _015_ = _068_ ? in[9] : \regar[0] [9];
  assign _001_ = _068_ ? in[10] : \regar[0] [10];
  assign _002_ = _068_ ? in[11] : \regar[0] [11];
  assign _003_ = _068_ ? in[12] : \regar[0] [12];
  assign _004_ = _068_ ? in[13] : \regar[0] [13];
  assign _005_ = _068_ ? in[14] : \regar[0] [14];
  assign _006_ = _068_ ? in[15] : \regar[0] [15];
  assign _069_ = arad[0] ? \regar[1] [0] : \regar[0] [0];
  assign _070_ = arad[0] ? \regar[3] [0] : \regar[2] [0];
  assign outa[0] = arad[1] ? _070_ : _069_;
  assign _071_ = arad[0] ? \regar[1] [1] : \regar[0] [1];
  assign _072_ = arad[0] ? \regar[3] [1] : \regar[2] [1];
  assign outa[1] = arad[1] ? _072_ : _071_;
  assign _073_ = arad[0] ? \regar[1] [2] : \regar[0] [2];
  assign _074_ = arad[0] ? \regar[3] [2] : \regar[2] [2];
  assign outa[2] = arad[1] ? _074_ : _073_;
  assign _075_ = arad[0] ? \regar[1] [3] : \regar[0] [3];
  assign _076_ = arad[0] ? \regar[3] [3] : \regar[2] [3];
  assign outa[3] = arad[1] ? _076_ : _075_;
  assign _077_ = arad[0] ? \regar[1] [4] : \regar[0] [4];
  assign _078_ = arad[0] ? \regar[3] [4] : \regar[2] [4];
  assign outa[4] = arad[1] ? _078_ : _077_;
  assign _079_ = arad[0] ? \regar[1] [5] : \regar[0] [5];
  assign _080_ = arad[0] ? \regar[3] [5] : \regar[2] [5];
  assign outa[5] = arad[1] ? _080_ : _079_;
  assign _081_ = arad[0] ? \regar[1] [6] : \regar[0] [6];
  assign _082_ = arad[0] ? \regar[3] [6] : \regar[2] [6];
  assign outa[6] = arad[1] ? _082_ : _081_;
  assign _083_ = arad[0] ? \regar[1] [7] : \regar[0] [7];
  assign _084_ = arad[0] ? \regar[3] [7] : \regar[2] [7];
  assign outa[7] = arad[1] ? _084_ : _083_;
  assign _085_ = arad[0] ? \regar[1] [8] : \regar[0] [8];
  assign _086_ = arad[0] ? \regar[3] [8] : \regar[2] [8];
  assign outa[8] = arad[1] ? _086_ : _085_;
  assign _087_ = arad[0] ? \regar[1] [9] : \regar[0] [9];
  assign _088_ = arad[0] ? \regar[3] [9] : \regar[2] [9];
  assign outa[9] = arad[1] ? _088_ : _087_;
  assign _089_ = arad[0] ? \regar[1] [10] : \regar[0] [10];
  assign _090_ = arad[0] ? \regar[3] [10] : \regar[2] [10];
  assign outa[10] = arad[1] ? _090_ : _089_;
  assign _091_ = arad[0] ? \regar[1] [11] : \regar[0] [11];
  assign _092_ = arad[0] ? \regar[3] [11] : \regar[2] [11];
  assign outa[11] = arad[1] ? _092_ : _091_;
  assign _093_ = arad[0] ? \regar[1] [12] : \regar[0] [12];
  assign _094_ = arad[0] ? \regar[3] [12] : \regar[2] [12];
  assign outa[12] = arad[1] ? _094_ : _093_;
  assign _095_ = arad[0] ? \regar[1] [13] : \regar[0] [13];
  assign _096_ = arad[0] ? \regar[3] [13] : \regar[2] [13];
  assign outa[13] = arad[1] ? _096_ : _095_;
  assign _097_ = arad[0] ? \regar[1] [14] : \regar[0] [14];
  assign _098_ = arad[0] ? \regar[3] [14] : \regar[2] [14];
  assign outa[14] = arad[1] ? _098_ : _097_;
  assign _099_ = arad[0] ? \regar[1] [15] : \regar[0] [15];
  assign _100_ = arad[0] ? \regar[3] [15] : \regar[2] [15];
  assign outa[15] = arad[1] ? _100_ : _099_;
  assign _101_ = brad[0] ? \regar[1] [0] : \regar[0] [0];
  assign _102_ = brad[0] ? \regar[3] [0] : \regar[2] [0];
  assign outb[0] = brad[1] ? _102_ : _101_;
  assign _103_ = brad[0] ? \regar[1] [1] : \regar[0] [1];
  assign _104_ = brad[0] ? \regar[3] [1] : \regar[2] [1];
  assign outb[1] = brad[1] ? _104_ : _103_;
  assign _105_ = brad[0] ? \regar[1] [2] : \regar[0] [2];
  assign _106_ = brad[0] ? \regar[3] [2] : \regar[2] [2];
  assign outb[2] = brad[1] ? _106_ : _105_;
  assign _107_ = brad[0] ? \regar[1] [3] : \regar[0] [3];
  assign _108_ = brad[0] ? \regar[3] [3] : \regar[2] [3];
  assign outb[3] = brad[1] ? _108_ : _107_;
  assign _109_ = brad[0] ? \regar[1] [4] : \regar[0] [4];
  assign _110_ = brad[0] ? \regar[3] [4] : \regar[2] [4];
  assign outb[4] = brad[1] ? _110_ : _109_;
  assign _111_ = brad[0] ? \regar[1] [5] : \regar[0] [5];
  assign _112_ = brad[0] ? \regar[3] [5] : \regar[2] [5];
  assign outb[5] = brad[1] ? _112_ : _111_;
  assign _113_ = brad[0] ? \regar[1] [6] : \regar[0] [6];
  assign _114_ = brad[0] ? \regar[3] [6] : \regar[2] [6];
  assign outb[6] = brad[1] ? _114_ : _113_;
  assign _115_ = brad[0] ? \regar[1] [7] : \regar[0] [7];
  assign _116_ = brad[0] ? \regar[3] [7] : \regar[2] [7];
  assign outb[7] = brad[1] ? _116_ : _115_;
  assign _117_ = brad[0] ? \regar[1] [8] : \regar[0] [8];
  assign _118_ = brad[0] ? \regar[3] [8] : \regar[2] [8];
  assign outb[8] = brad[1] ? _118_ : _117_;
  assign _119_ = brad[0] ? \regar[1] [9] : \regar[0] [9];
  assign _120_ = brad[0] ? \regar[3] [9] : \regar[2] [9];
  assign outb[9] = brad[1] ? _120_ : _119_;
  assign _121_ = brad[0] ? \regar[1] [10] : \regar[0] [10];
  assign _122_ = brad[0] ? \regar[3] [10] : \regar[2] [10];
  assign outb[10] = brad[1] ? _122_ : _121_;
  assign _123_ = brad[0] ? \regar[1] [11] : \regar[0] [11];
  assign _124_ = brad[0] ? \regar[3] [11] : \regar[2] [11];
  assign outb[11] = brad[1] ? _124_ : _123_;
  assign _125_ = brad[0] ? \regar[1] [12] : \regar[0] [12];
  assign _126_ = brad[0] ? \regar[3] [12] : \regar[2] [12];
  assign outb[12] = brad[1] ? _126_ : _125_;
  assign _127_ = brad[0] ? \regar[1] [13] : \regar[0] [13];
  assign _128_ = brad[0] ? \regar[3] [13] : \regar[2] [13];
  assign outb[13] = brad[1] ? _128_ : _127_;
  assign _129_ = brad[0] ? \regar[1] [14] : \regar[0] [14];
  assign _130_ = brad[0] ? \regar[3] [14] : \regar[2] [14];
  assign outb[14] = brad[1] ? _130_ : _129_;
  assign _131_ = brad[0] ? \regar[1] [15] : \regar[0] [15];
  assign _132_ = brad[0] ? \regar[3] [15] : \regar[2] [15];
  assign outb[15] = brad[1] ? _132_ : _131_;
  assign _133_ = wad[0] | ~(wad[1]);
  assign _134_ = _133_ | ~(en);
  assign _032_ = _134_ ? \regar[2] [0] : in[0];
  assign _039_ = _134_ ? \regar[2] [1] : in[1];
  assign _040_ = _134_ ? \regar[2] [2] : in[2];
  assign _041_ = _134_ ? \regar[2] [3] : in[3];
  assign _042_ = _134_ ? \regar[2] [4] : in[4];
  assign _043_ = _134_ ? \regar[2] [5] : in[5];
  assign _044_ = _134_ ? \regar[2] [6] : in[6];
  assign _045_ = _134_ ? \regar[2] [7] : in[7];
  assign _046_ = _134_ ? \regar[2] [8] : in[8];
  assign _047_ = _134_ ? \regar[2] [9] : in[9];
  assign _033_ = _134_ ? \regar[2] [10] : in[10];
  assign _034_ = _134_ ? \regar[2] [11] : in[11];
  assign _035_ = _134_ ? \regar[2] [12] : in[12];
  assign _036_ = _134_ ? \regar[2] [13] : in[13];
  assign _037_ = _134_ ? \regar[2] [14] : in[14];
  assign _038_ = _134_ ? \regar[2] [15] : in[15];
  assign _135_ = wad[1] | ~(wad[0]);
  assign _136_ = ~(_135_ | _064_);
  assign _016_ = _136_ ? in[0] : \regar[1] [0];
  assign _023_ = _136_ ? in[1] : \regar[1] [1];
  assign _024_ = _136_ ? in[2] : \regar[1] [2];
  assign _025_ = _136_ ? in[3] : \regar[1] [3];
  assign _026_ = _136_ ? in[4] : \regar[1] [4];
  assign _027_ = _136_ ? in[5] : \regar[1] [5];
  assign _028_ = _136_ ? in[6] : \regar[1] [6];
  assign _029_ = _136_ ? in[7] : \regar[1] [7];
  assign _030_ = _136_ ? in[8] : \regar[1] [8];
  assign _031_ = _136_ ? in[9] : \regar[1] [9];
  assign _017_ = _136_ ? in[10] : \regar[1] [10];
  assign _018_ = _136_ ? in[11] : \regar[1] [11];
  assign _019_ = _136_ ? in[12] : \regar[1] [12];
  assign _020_ = _136_ ? in[13] : \regar[1] [13];
  assign _021_ = _136_ ? in[14] : \regar[1] [14];
  assign _022_ = _136_ ? in[15] : \regar[1] [15];
  always @(posedge clk)
      \regar[3] [0] <= _048_;
  always @(posedge clk)
      \regar[3] [1] <= _055_;
  always @(posedge clk)
      \regar[3] [2] <= _056_;
  always @(posedge clk)
      \regar[3] [3] <= _057_;
  always @(posedge clk)
      \regar[3] [4] <= _058_;
  always @(posedge clk)
      \regar[3] [5] <= _059_;
  always @(posedge clk)
      \regar[3] [6] <= _060_;
  always @(posedge clk)
      \regar[3] [7] <= _061_;
  always @(posedge clk)
      \regar[3] [8] <= _062_;
  always @(posedge clk)
      \regar[3] [9] <= _063_;
  always @(posedge clk)
      \regar[3] [10] <= _049_;
  always @(posedge clk)
      \regar[3] [11] <= _050_;
  always @(posedge clk)
      \regar[3] [12] <= _051_;
  always @(posedge clk)
      \regar[3] [13] <= _052_;
  always @(posedge clk)
      \regar[3] [14] <= _053_;
  always @(posedge clk)
      \regar[3] [15] <= _054_;
  always @(posedge clk)
      \regar[0] [0] <= _000_;
  always @(posedge clk)
      \regar[0] [1] <= _007_;
  always @(posedge clk)
      \regar[0] [2] <= _008_;
  always @(posedge clk)
      \regar[0] [3] <= _009_;
  always @(posedge clk)
      \regar[0] [4] <= _010_;
  always @(posedge clk)
      \regar[0] [5] <= _011_;
  always @(posedge clk)
      \regar[0] [6] <= _012_;
  always @(posedge clk)
      \regar[0] [7] <= _013_;
  always @(posedge clk)
      \regar[0] [8] <= _014_;
  always @(posedge clk)
      \regar[0] [9] <= _015_;
  always @(posedge clk)
      \regar[0] [10] <= _001_;
  always @(posedge clk)
      \regar[0] [11] <= _002_;
  always @(posedge clk)
      \regar[0] [12] <= _003_;
  always @(posedge clk)
      \regar[0] [13] <= _004_;
  always @(posedge clk)
      \regar[0] [14] <= _005_;
  always @(posedge clk)
      \regar[0] [15] <= _006_;
  always @(posedge clk)
      \regar[1] [0] <= _016_;
  always @(posedge clk)
      \regar[1] [1] <= _023_;
  always @(posedge clk)
      \regar[1] [2] <= _024_;
  always @(posedge clk)
      \regar[1] [3] <= _025_;
  always @(posedge clk)
      \regar[1] [4] <= _026_;
  always @(posedge clk)
      \regar[1] [5] <= _027_;
  always @(posedge clk)
      \regar[1] [6] <= _028_;
  always @(posedge clk)
      \regar[1] [7] <= _029_;
  always @(posedge clk)
      \regar[1] [8] <= _030_;
  always @(posedge clk)
      \regar[1] [9] <= _031_;
  always @(posedge clk)
      \regar[1] [10] <= _017_;
  always @(posedge clk)
      \regar[1] [11] <= _018_;
  always @(posedge clk)
      \regar[1] [12] <= _019_;
  always @(posedge clk)
      \regar[1] [13] <= _020_;
  always @(posedge clk)
      \regar[1] [14] <= _021_;
  always @(posedge clk)
      \regar[1] [15] <= _022_;
  always @(posedge clk)
      \regar[2] [0] <= _032_;
  always @(posedge clk)
      \regar[2] [1] <= _039_;
  always @(posedge clk)
      \regar[2] [2] <= _040_;
  always @(posedge clk)
      \regar[2] [3] <= _041_;
  always @(posedge clk)
      \regar[2] [4] <= _042_;
  always @(posedge clk)
      \regar[2] [5] <= _043_;
  always @(posedge clk)
      \regar[2] [6] <= _044_;
  always @(posedge clk)
      \regar[2] [7] <= _045_;
  always @(posedge clk)
      \regar[2] [8] <= _046_;
  always @(posedge clk)
      \regar[2] [9] <= _047_;
  always @(posedge clk)
      \regar[2] [10] <= _033_;
  always @(posedge clk)
      \regar[2] [11] <= _034_;
  always @(posedge clk)
      \regar[2] [12] <= _035_;
  always @(posedge clk)
      \regar[2] [13] <= _036_;
  always @(posedge clk)
      \regar[2] [14] <= _037_;
  always @(posedge clk)
      \regar[2] [15] <= _038_;
endmodule

(* top =  1  *)
(* src = "top.v:1" *)
module top(we, wd, clk, rst);
  (* src = "top.v:5" *)
  wire [15:0] a;
  (* src = "top.v:7" *)
  wire [1:0] arad;
  (* src = "top.v:5" *)
  wire [15:0] b;
  (* src = "top.v:7" *)
  wire [1:0] brad;
  (* src = "top.v:4" *)
  input clk;
  (* src = "top.v:14" *)
  wire halt;
  (* src = "top.v:6" *)
  wire [7:0] ib;
  (* src = "top.v:5" *)
  wire [15:0] lb;
  (* src = "top.v:12" *)
  wire lh;
  (* src = "top.v:12" *)
  wire ll;
  (* src = "top.v:10" *)
  wire [15:0] o;
  (* src = "top.v:8" *)
  wire [2:0] op;
  (* src = "top.v:9" *)
  wire [5:0] pca;
  (* src = "top.v:4" *)
  input rst;
  (* src = "top.v:7" *)
  wire [1:0] wad;
  (* src = "top.v:3" *)
  output [15:0] wd;
  (* src = "top.v:2" *)
  output we;
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:13" *)
  alu alu (
    .a(a),
    .b(lb),
    .op(op),
    .result(wd)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:16" *)
  dec dec (
    .aradr(arad),
    .bradr(brad),
    .halt(halt),
    .ib(ib),
    .lh(lh),
    .ll(ll),
    .o(o),
    .op(op),
    .wadr(wad),
    .we(we)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:15" *)
  imem imem (
    .o(o),
    .pc(pca)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:12" *)
  lidx lidx (
    .b(b),
    .ib(ib),
    .lb(lb),
    .lh(lh),
    .ll(ll)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:14" *)
  pc pc (
    .clk(clk),
    .halt(halt),
    .pc(pca),
    .rst(rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:11" *)
  rega rega (
    .arad(arad),
    .brad(brad),
    .clk(clk),
    .en(we),
    .in(wd),
    .outa(a),
    .outb(b),
    .rst(rst),
    .wad(wad)
  );
endmodule
